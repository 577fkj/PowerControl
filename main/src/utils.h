#ifndef __UTILS_H
#define __UTILS_H

#include <stdint.h>
#include "huawei_r48xx.h"

#define create_timer(timer, callback_, user_data) \
    esp_timer_create_args_t timer##_args = {      \
        .callback = (callback_),                  \
        .arg = (user_data),                       \
        .name = #timer "_timer"};                 \
    esp_timer_handle_t timer##_timer_handle = 0;  \
    esp_err_t timer_##timer##_err = esp_timer_create(&timer##_args, &timer##_timer_handle);

#define create_timer_with_handle(handle, timer, callback_, user_data) \
    esp_timer_create_args_t timer##_args = {                          \
        .callback = (callback_),                                      \
        .arg = (user_data),                                           \
        .name = #timer "_timer"};                                     \
    esp_err_t timer_##timer##_err = esp_timer_create(&timer##_args, handle);

static uint16_t NTC_Table[165][3] = {
    {186, 200, -40},   // 0
    {196, 211, -39},   // 1
    {207, 223, -38},   // 2
    {219, 235, -37},   // 3
    {231, 248, -36},   // 4
    {243, 261, -35},   // 5
    {256, 274, -34},   // 6
    {270, 288, -33},   // 7
    {284, 303, -32},   // 8
    {298, 318, -31},   // 9
    {314, 334, -30},   // 10
    {329, 351, -29},   // 11
    {346, 368, -28},   // 12
    {363, 385, -27},   // 13
    {381, 404, -26},   // 14
    {399, 423, -25},   // 15
    {418, 442, -24},   // 16
    {438, 463, -23},   // 17
    {458, 483, -22},   // 18
    {479, 505, -21},   // 19
    {501, 527, -20},   // 20
    {523, 550, -19},   // 21
    {546, 574, -18},   // 22
    {570, 598, -17},   // 23
    {594, 623, -16},   // 24
    {620, 649, -15},   // 25
    {645, 675, -14},   // 26
    {672, 702, -13},   // 27
    {699, 729, -12},   // 28
    {727, 758, -11},   // 29
    {756, 786, -10},   // 30
    {785, 816, -9},    // 31
    {815, 846, -8},    // 32
    {845, 877, -7},    // 33
    {877, 908, -6},    // 34
    {908, 940, -5},    // 35
    {941, 973, -4},    // 36
    {974, 1006, -3},   // 37
    {1007, 1040, -2},  // 38
    {1042, 1074, -1},  // 39
    {1076, 1108, 0},   // 40
    {1111, 1144, 1},   // 41
    {1147, 1179, 2},   // 42
    {1183, 1215, 3},   // 43
    {1220, 1251, 4},   // 44
    {1257, 1288, 5},   // 45
    {1294, 1325, 6},   // 46
    {1332, 1363, 7},   // 47
    {1370, 1401, 8},   // 48
    {1408, 1439, 9},   // 49
    {1447, 1477, 10},  // 50
    {1486, 1515, 11},  // 51
    {1525, 1554, 12},  // 52
    {1564, 1592, 13},  // 53
    {1603, 1631, 14},  // 54
    {1643, 1670, 15},  // 55
    {1683, 1709, 16},  // 56
    {1722, 1748, 17},  // 57
    {1762, 1787, 18},  // 58
    {1801, 1826, 19},  // 59
    {1841, 1865, 20},  // 60
    {1881, 1904, 21},  // 61
    {1920, 1943, 22},  // 62
    {1959, 1981, 23},  // 63
    {1998, 2020, 24},  // 64
    {2037, 2058, 25},  // 65
    {2075, 2097, 26},  // 66
    {2113, 2135, 27},  // 67
    {2150, 2173, 28},  // 68
    {2188, 2211, 29},  // 69
    {2225, 2249, 30},  // 70
    {2261, 2286, 31},  // 71
    {2297, 2323, 32},  // 72
    {2333, 2359, 33},  // 73
    {2369, 2395, 34},  // 74
    {2404, 2431, 35},  // 75
    {2439, 2466, 36},  // 76
    {2473, 2501, 37},  // 77
    {2507, 2535, 38},  // 78
    {2540, 2569, 39},  // 79
    {2573, 2602, 40},  // 80
    {2606, 2635, 41},  // 81
    {2638, 2668, 42},  // 82
    {2669, 2699, 43},  // 83
    {2700, 2731, 44},  // 84
    {2731, 2762, 45},  // 85
    {2761, 2792, 46},  // 86
    {2790, 2822, 47},  // 87
    {2819, 2851, 48},  // 88
    {2848, 2880, 49},  // 89
    {2876, 2908, 50},  // 90
    {2903, 2935, 51},  // 91
    {2930, 2962, 52},  // 92
    {2957, 2989, 53},  // 93
    {2983, 3015, 54},  // 94
    {3008, 3041, 55},  // 95
    {3033, 3066, 56},  // 96
    {3058, 3090, 57},  // 97
    {3082, 3114, 58},  // 98
    {3105, 3137, 59},  // 99
    {3128, 3160, 60},  // 100
    {3151, 3183, 61},  // 101
    {3173, 3205, 62},  // 102
    {3194, 3226, 63},  // 103
    {3215, 3247, 64},  // 104
    {3236, 3268, 65},  // 105
    {3256, 3287, 66},  // 106
    {3276, 3307, 67},  // 107
    {3295, 3326, 68},  // 108
    {3314, 3345, 69},  // 109
    {3332, 3363, 70},  // 110
    {3350, 3381, 71},  // 111
    {3368, 3398, 72},  // 112
    {3385, 3415, 73},  // 113
    {3402, 3431, 74},  // 114
    {3418, 3447, 75},  // 115
    {3434, 3463, 76},  // 116
    {3450, 3478, 77},  // 117
    {3465, 3493, 78},  // 118
    {3480, 3508, 79},  // 119
    {3494, 3522, 80},  // 120
    {3508, 3536, 81},  // 121
    {3522, 3549, 82},  // 122
    {3535, 3563, 83},  // 123
    {3549, 3575, 84},  // 124
    {3561, 3588, 85},  // 125
    {3574, 3600, 86},  // 126
    {3586, 3612, 87},  // 127
    {3598, 3624, 88},  // 128
    {3609, 3635, 89},  // 129
    {3621, 3646, 90},  // 130
    {3632, 3657, 91},  // 131
    {3642, 3667, 92},  // 132
    {3653, 3677, 93},  // 133
    {3663, 3687, 94},  // 134
    {3673, 3697, 95},  // 135
    {3683, 3706, 96},  // 136
    {3692, 3715, 97},  // 137
    {3701, 3724, 98},  // 138
    {3710, 3733, 99},  // 139
    {3719, 3741, 100}, // 140
    {3728, 3750, 101}, // 141
    {3736, 3758, 102}, // 142
    {3744, 3765, 103}, // 143
    {3752, 3773, 104}, // 144
    {3760, 3781, 105}, // 145
    {3767, 3788, 106}, // 146
    {3775, 3795, 107}, // 147
    {3782, 3802, 108}, // 148
    {3789, 3808, 109}, // 149
    {3796, 3815, 110}, // 150
    {3802, 3821, 111}, // 151
    {3809, 3827, 112}, // 152
    {3815, 3834, 113}, // 153
    {3821, 3839, 114}, // 154
    {3827, 3845, 115}, // 155
    {3833, 3851, 116}, // 156
    {3839, 3856, 117}, // 157
    {3844, 3862, 118}, // 158
    {3850, 3867, 119}, // 159
    {3855, 3872, 120}, // 160
    {3860, 3877, 121}, // 161
    {3865, 3881, 122}, // 162
    {3870, 3886, 123}, // 163
    {3875, 3891, 124}, // 164
    {3880, 3895, 125}  // 165
};

uint16_t unpack_uint16_big_endian(const uint8_t *data);
uint32_t unpack_uint32_big_endian(const uint8_t *data);
// void doubleToString(double num, int precision, char *str);
void hexdump(const void *data, uint16_t size);
int starts_with(const char *str, const char *prefix);
void get_substring(const char *str, int start, int end, char *result);
int ends_with(char *str, char *suffix);
uint16_t get_temperature_valut(uint32_t adc);

#endif